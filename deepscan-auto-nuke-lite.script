/*
    deepscan-auto-nuke-lite.script
    for bitburner version: 0.35.1

    winners don't use copyright
    last version of this script should be at https://github.com/desci/netscripts.d

    This script grants root access to every server in the network.
    The only exception is the home server and the server where the script is running.
    If you have more bought servers, this script will attempt to nuke them, unless you add them to the ownNodes variable.
    
    This automatic version will run forever, however it won't automatically create new programs.
*/

origin = getHostname();
ownNodes = [ "home", origin ];
nukedNodesToday = 0;

while (true) {
    rootingPrograms = 0;
    foundnodes = [];
    stack = [];
    stack.push(origin);
    // Calculates current hacking resources
    // And create conditions where possible
    rootingPrograms = 0;
    if (fileExists("BruteSSH.exe", "home")) {
        rootingPrograms++;
    }
    if (fileExists("FTPCrack.exe", "home")) {
        rootingPrograms++;
    }
    if (fileExists("relaySMTP.exe", "home")) {
        rootingPrograms++;
    }
    if (fileExists("HTTPWorm.exe", "home")) {
        rootingPrograms++;
    }
    if (fileExists("SQLInject.exe", "home")) {
        rootingPrograms++;
    }
    
    while(stack.length > 0) {
        node = stack.pop();
        if (! foundnodes.includes(node)) {
            tprint("----------------------------------------");
            tprint("Working on " + node + "...");
            
            // We will only nuke the server if the necessary conditions are met
            if (! ownNodes.includes(node) ) {
                if (! hasRootAccess(node)) {
                    if (getServerRequiredHackingLevel(node) <= getHackingLevel()) {
                        if (getServerNumPortsRequired(node) <= rootingPrograms) {
                            tprint("Attempting to nuke " + node + "...");
                            //TODO change to switch case when netscript supports it
                            if (getServerNumPortsRequired(node) > 0) {
                                brutessh(node);
                                if (getServerNumPortsRequired(node) > 1) {
                                    ftpcrack(node);
                                    if (getServerNumPortsRequired(node) > 2) {
                                        relaysmtp(node);
                                        if (getServerNumPortsRequired(node) > 3) {
                                            httpworm(node);
                                            if (getServerNumPortsRequired(node) > 4) {
                                                sqlinject(node);
                                            }
                                        }
                                    }
                                }
                            }
                            nuke(node);
                            if (hasRootAccess(node)) {
                                tprint(node + " successfully rooted!");
                                nukedNodesToday++;
                            }
                        } else {
                            tprint(node + " won't be rooted today because it requires " + getServerNumPortsRequired(node) + " ports to hack but we only have enough software for " + rootingPrograms);
                        }
                    } else {
                        tprint(node + " won't be rooted today because the required hacking level is " + getServerRequiredHackingLevel(node) + " and our hacking level is " + getHackingLevel());
                    }
                } else {
                    tprint(node + " won't be rooted today because it is already rooted");
                }
            } else {
                tprint(node + " won't be rooted today because it is included in ourNodes");
            }
            
            tprint("adding " + node + " to foundnodes...");
            foundnodes.push(node);
            tprint("scanning " + node + "...");
            nextNodes = scan(node);
            for (i = 0; i < nextNodes.length; ++i) {
                stack.push(nextNodes[i]);
            }
            tprint("current stack: " + stack);
        }
    }
    tprint("========================================");
    tprint("Rooted servers so far: " + nukedNodesToday);
}

