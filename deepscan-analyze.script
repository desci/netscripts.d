/*
    deepscan.script for Bitburner v0.47.2
    Winners don't use copyright
    
    Latest version of this script should be at
        https://github.com/iuriguilherme/netscripts.d
    Bitburner should be at https://github.com/danielyxie/bitburner
    
    This script requires 1.85 GB of RAM to run for 1 thread(s)

    This script displays information on all scannable servers in the 
    network. All information is printed in the terminal.
    This is not equivalent to running `analyze` or `scan-analyze` on 
    every server, it only uses netscript readily available functions. 
    Some features from `analyze` may be missing, however there may be 
    other features not present on `analyze` or `scan-analyze`.
*/

allServers = [];
servers = [];
whoami = getHostname();
servers.push(whoami);

while (servers.length > 0) {
    server = servers.pop();
    if (!allServers.includes(server)) {
        tprint("--------------------------------" +
            "-------------------------------");
        allServers.push(server);
        tprint("Analyzing " + server + "...");
        tprint("\n");
        tprint(
            "Root Access: " +
            hasRootAccess(server) +
            ", Required hacking skill: " +
             getServerRequiredHackingLevel(server)
        );
        tprint(
            "Required number of open ports for NUKE: " +
            getServerNumPortsRequired(server)
        );
        //TODO Implement this, source: https://github.com/danielyxie/bitburner/blob/99d774cf5a6a1d94a1eb463dc21205c14c2ceefc/src/NetscriptEvaluator.js#L875https://github.com/danielyxie/bitburner/blob/99d774cf5a6a1d94a1eb463dc21205c14c2ceefc/src/NetscriptEvaluator.js#L875
        //tprint("Estimated chance to hack: " + "0%");
        tprint("\n");
        tprint("Estimated time to run");
        tprint("==hack: " + getHackTime(server) + " seconds");
        tprint("==grow: " + getGrowTime(server) + " seconds");
        tprint("==weaken: " + getWeakenTime(server) + " seconds");
        tprint("\n");
        serverRam = getServerRam(server)
        tprint(
            "RAM: " +
            serverRam[0] +
            "GB total / " +
            serverRam[1] +
            "GB used / " +
            (serverRam[0] - serverRam[1]) +
            "GB available"
        );
        tprint("\n");
        tprint(
            "Server security level: " +
            getServerSecurityLevel(server) +
            " (" +
            getServerBaseSecurityLevel(server) +
            " base, " +
            getServerMinSecurityLevel(server) +
            " minimum)"
        );
        tprint("\n");
        //TODO format the total money
        tprint(
            "Estimated total money available on server: $" +
            getServerMoneyAvailable(server)
        );
        tprint("Money growth parameter: " +  getServerGrowth(server));
        tprint("\n");
        tprint("List of files found on " + server + ": " + ls(server));
        tprint("\n");

        tprint("Will now scan " + server + " for connected servers...");
        nextServers = scan(server);
        for (i = 0; i < nextServers.length; ++i) {
            if (!foundServers.includes(nextServers[i])) {
                tprint(
                    "++found " +
                    nextServers[i] +
                    " connected to " +
                    server +
                    ", adding to servers list"
                );
                servers.push(nextServers[i]);
            } else {
                tprint(
                    "--found " +
                    nextServers[i] +
                    " connected to " +
                    server +
                    ", but it's already on foundServers" +
                    ", not adding to servers."
                );
            }
        }
    }
}

tprint("================================" +
    "===============================");
tprint(
    "Full list of servers found in the network:" +
    allServers.join(', ')
);
